name: Test

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main ]
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main ]

permissions: read-all

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '16'

    - uses: actions/cache@v2.1.6
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run unit tests
      run: ./gradlew test -x spotlessCheck -x openApiValidate --info

    - name: Run integration tests
      run: ./gradlew integrationTest -x spotlessCheck -x openApiValidate --info

  test_helm:
    name: Test Helm Chart
    runs-on: ubuntu-latest

    # If the PR is coming from a fork (pull_request_target), ensure it's opened by "dependabot[bot]".
    # Otherwise, clone it normally.
    if: |
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]') ||
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]')

    env:
      CHART_RELEASE_TEST_NAMESPACE: phoenix

    steps:

    - name: Checkout
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: actions/checkout@v2.3.4

    - name: Checkout PR
      if: ${{ github.event_name == 'pull_request_target' }}
      uses: actions/checkout@v2.3.4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '16'

    - uses: actions/cache@v2.1.6
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up Helm
      uses: azure/setup-helm@v1.1
      with:
        version: v3.6.0

    - name: Provision Kubernetes KinD Cluster and local Container Registry
      uses: container-tools/kind-action@v1

    - name: Make scripts executable
      run: |
        chmod +x .github/scripts/*.sh
        chmod +x api/kubernetes/*.sh

    - name: Build, package and push container image
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ./gradlew --info \
          :cosmotech-api:jib \
          -Djib.to.image=kind-registry:5000/cosmotech-api:latest \
          -Djib.allowInsecureRegistries=true

    - name: Install the Helm Chart
      env:
        PHOENIXAKSDEV_TENANT_ID: ${{ secrets.PHOENIXAKSDEV_TENANT_ID }}
        PHOENIXAKSDEV_CLIENT_ID: ${{ secrets.PHOENIXAKSDEV_CLIENT_ID }}
        PHOENIXAKSDEV_CLIENT_SECRET: ${{ secrets.PHOENIXAKSDEV_CLIENT_SECRET }}
        PHOENIXAKSDEV_COSMOS_URI: ${{ secrets.PHOENIXAKSDEV_COSMOS_URI }}
        PHOENIXAKSDEV_COSMOS_KEY: ${{ secrets.PHOENIXAKSDEV_COSMOS_KEY }}
        PHOENIXAKSDEV_STORAGE_ACCOUNT_NAME: ${{ secrets.PHOENIXAKSDEV_STORAGE_ACCOUNT_NAME }}
        PHOENIXAKSDEV_STORAGE_ACCOUNT_KEY: ${{ secrets.PHOENIXAKSDEV_STORAGE_ACCOUNT_KEY }}
      run: .github/scripts/install-helm-chart.sh

    - name: Test Helm Release
      run: .github/scripts/test-helm-release.sh
