#
# Sample configuration file for the dev profile.
# Feel free to customize this file or, if needed, reach out to the Cosmo Tech for support.
#
# NOTE: Not all supported properties (declared in api/src/main/resources/application.yml)
# are included here.
# Only the relevant ones that need to be set are listed here.
#
logging:
  level:
    com.cosmotech: DEBUG
    web: INFO
    org.springframework: WARN
    org.springframework.security: INFO
    com.redis: INFO

server:
  port: 8080
  error:
    whitelabel:
      enabled: true
    include-stacktrace: always

management:
  endpoint:
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  server:
    port: 8081

spring:
  ssl:
    bundle:
      pem:
        keycloak:
          truststore:
            certificate: "classpath:GandiRSADomainValidationSecureServerCA3.pem"

csm:
  platform:
    containerRegistry:
      checkSolutionImage : false
    api:
      base-path: /
      base-url: "[fill-this-value]" # e.g for running it locally http://localhost:8080
      version: latest
    id-generator:
      type: hashid
    event-publisher:
      type: in_process
    authorization:
      roles-jwt-claim: "userRoles"
      principal-jwt-claim: "email"
      allowedTenants:
        - "[fill-this-value]" # NAMESPACE
    identityProvider:
      tls:
        enabled: true
        bundle: "keycloak"
      audience: account
      authorizationUrl: "https://kubernetes.cosmotech.com/keycloak/realms/brewery/protocol/openid-connect/auth"
      code: keycloak
      defaultScopes:
        openid: OpenId Scope
      identity:
        clientId: "[fill-this-value]"
        clientSecret: "[fill-this-value]"
        tenantId: "[fill-this-value]" # NAMESPACE
      serverBaseUrl: "[fill-this-value]" # e.g https://kubernetes.cosmotech.com/keycloak
      tokenUrl: "[fill-this-value]" # eg. https://kubernetes.cosmotech.com/keycloak/realms/brewery/protocol/openid-connect/token
    metrics:
      enabled: false
    argo:
      base-uri: "http://localhost:2746"
      workflows:
        namespace: "[fill-this-value]" # NAMESPACE
        service-account-name: "[fill-this-value]" # e.g argo-workflows-$NAMESPACE-service-account
        nodePoolLabel: ""
    loki:
      # base Url of Loki where to query logs
      baseUrl: http://localhost:3100
      containerRegistry:
        host: "[fill-this-value]"
        password: "[fill-this-value]"
        provider: "[fill-this-value]"
        registryPassword: "[fill-this-value]"
        registryUrl: "[fill-this-value]"
        registryUserName: "[fill-this-value]"
        scheme: https
        username: "[fill-this-value]"
    images:
      scenario-fetch-parameters: cosmo-tech/fetch-scenario-parameters
      send-datawarehouse: cosmo-tech/azure-data-explorer-connector
      scenario-data-upload: cosmo-tech/azure-storage-publish:latest
    containers:
      - name: "ADTTwingraphImport"
        imageRegistry: "ghcr.io"
        imageName: "cosmo-tech/adt-twincache-connector"
        imageVersion: "0.3.0"
      - name: "AzureStorageTwingraphImport"
        imageRegistry: "ghcr.io"
        imageName: "cosmo-tech/azstorage-twincache-connector"
        imageVersion: "1.2.0"
      - name: "TwincacheConnector"
        imageRegistry: "ghcr.io"
        imageName: "cosmo-tech/twincache-connector"
        imageVersion: "0.4.1"
    twincache:
      host: "localhost"
      password: ""[fill-this-value]""
      port: 6379
      tls:
        enabled: false
      username: default
    internalResultServices:
      enabled: false
      eventBus:
        enabled: false
        host: "[fill-this-value]" #e.g rabbitmq-NAMESPACE.NAMESPACE.svc.cluster.local
        listener:
          password: "[fill-this-value]"
          username: "[fill-this-value]"
        port: 5672
        sender:
          password: "[fill-this-value]"
          username: "[fill-this-value]"
        tls:
          enabled: false
      storage:
        admin:
          password: "[fill-this-value]"
          username: "[fill-this-value]"
        host: "[fill-this-value]" # postgresql-NAMESPACE.NAMESPACE.svc.cluster.local
        port: 5432
        reader:
          password: "[fill-this-value]"
          username: cosmotech_api_reader
        writer:
          password: "[fill-this-value]"
          username: cosmotech_api_writer


