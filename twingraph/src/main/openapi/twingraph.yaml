openapi: 3.0.3

info:
  title: Cosmo Tech Twin graph Manager API
  description: Cosmo Tech Twin graph Manager API
  version: 0.0.1-SNAPSHOT

servers:
  - url: 'https://api.azure.cosmo-platform.com'
  - url: 'http://localhost:4010'

security:
  - oAuth2AuthCode: [ ]

tags:
  - name: twingraph
    description: Twin Graph Management

paths:
  /organizations/{organization_id}/twingraph/{graph_id}:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
      - name: graph_id
        in: path
        description: the Graph Identifier
        required: true
        schema:
          type: string
    post:
      operationId: createGraph
      tags:
        - twingraph
      summary: Create a new graph
      description: |
        To create a new graph from flat files,  you need to create a Zip file. This Zip
        file must countain two folders named Edges and Nodes.

        .zip hierarchy:
        *main_folder/Nodes
        *main_folder/Edges

        In each folder you can place one or multiple csv files containing your Nodes or
        Edges data.

        Your csv files must follow the following header (column name) requirements:

        The Nodes CSVs requires at least one column (the 1st).Column name = 'id'. It
        will represent the nodes ID
        Ids must be populated with string

        The Edges CSVs require three columns named, in order,
        * source
        * target
        * id

        those colomns represent
        * The source of the edge
        * The target of the edge
        * The id of the edge

        All following columns content are up to you.
      requestBody:
        required: false
        content:
          application/octet-stream:
            # Using 'application/octet-stream' so Swagger UI can display a file upload button.

            # See https://github.com/swagger-api/swagger-ui/issues/5636
            # In any case, the request body mime type is enforced in the Service implementation.
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: Successful response
    delete:
      operationId: delete
      tags:
        - twingraph
      description: Delete all versions of a graph and his metadatas
      summary: Delete all versions of a graph and his metadatas
      responses:
        '204':
          description: Successful response
  /organizations/{organization_id}/twingraphs:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
    get:
      operationId: findAllTwingraphs
      tags:
        - twingraph
      summary: Return the list of all graphs stored in the organization
      description: Return the list of all graphs stored in the organization
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /organizations/{organization_id}/job/{job_id}/status:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
      - name: job_id
        in: path
        description: the job identifier
        required: true
        schema:
          type: string
    get:
      operationId: jobStatus
      tags:
        - twingraph
      summary: Get the status of a job
      description: Get the status of a job
      responses:
        '200':
          description: Successful response
          content:
            application/yaml:
              schema:
                type: string
            application/json:
              schema:
                type: string
  /organizations/{organization_id}/twingraph/{graph_id}/query:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
      - name: graph_id
        in: path
        description: the Graph Identifier
        required: true
        schema:
          type: string
    post:
      operationId: query
      tags:
        - twingraph
      summary: Run a query on a graph instance
      description: Run a query on a graph instance
      requestBody:
        description: the query to run
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwinGraphQuery'
            examples:
              GetAllNodes:
                $ref: '#/components/examples/GetAllNodes'
          application/yaml:
            schema:
              $ref: '#/components/schemas/TwinGraphQuery'
            examples:
              GetAllNodes:
                $ref: '#/components/examples/GetAllNodes'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: string
  /organizations/{organization_id}/twingraph/{graph_id}/batch-query:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
      - name: graph_id
        in: path
        description: the Graph Identifier
        required: true
        schema:
          type: string
    post:
      operationId: batchQuery
      tags:
        - twingraph
      summary: Run a query on a graph instance and return the result as a zip file in async mode
      description: Run a query on a graph instance and return the result as a zip file in async mode
      requestBody:
        description: the query to run
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwinGraphQuery'
            examples:
              GetAllNodes:
                $ref: '#/components/examples/GetAllNodes'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwinGraphHash'
  /organizations/{organization_id}/twingraph/download/{hash}:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
      - name: hash
        in: path
        description: the Graph download identifier
        required: true
        schema:
          type: string
    get:
      operationId: downloadGraph
      tags:
        - twingraph
      summary: Download a graph compressed in a zip file
      description: Download a graph compressed in a zip file
      responses:
        '200':
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /organizations/{organization_id}/twingraph/{graph_id}/entity/{type}:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
      - name: graph_id
        in: path
        description: the Graph Identifier
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: the entity model type
        required: true
        schema:
          type: string
          enum:
            - node
            - relationship
    post:
      operationId: createEntities
      tags:
        - twingraph
      summary: Create new entities in a graph instance
      description: create new entities in a graph instance
      requestBody:
        description: the entities to create
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GraphProperties'
            examples:
              QueryEntities:
                $ref: '#/components/examples/QueryEntities'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: string
    get:
      operationId: getEntities
      tags:
        - twingraph
      summary: Get entities in a graph instance
      description: get entities in a graph instance
      parameters:
        - name: ids
          in: query
          description: the entities to get
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: string
    patch:
      operationId: updateEntities
      tags:
        - twingraph
      summary: Update entities in a graph instance
      description: update entities in a graph instance
      requestBody:
        description: the entities to update
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GraphProperties'
            examples:
              QueryEntities:
                $ref: '#/components/examples/QueryEntities'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: string
    delete:
      operationId: deleteEntities
      tags:
        - twingraph
      summary: Delete entities in a graph instance
      description: delete entities in a graph instance
      parameters:
        - name: ids
          in: query
          description: the entities to delete
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful response
  /organizations/{organization_id}/twingraph/{graph_id}/metadata:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
      - name: graph_id
        in: path
        description: the Graph Identifier
        required: true
        schema:
          type: string
    get:
      operationId: getGraphMetaData
      tags:
        - twingraph
      summary: Return the metaData of the specified graph
      description: Return the metaData of the specified graph
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                $ref: "#/components/examples/MetaDataResponse"
    patch:
      operationId: updateGraphMetaData
      tags:
        - twingraph
      summary: Update the metaData of the specified graph
      description: Update the metaData of the specified graph
      requestBody:
        description: the metaData to update
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            example:
              graphName: "My Awesome Graph"
              graphRotation: "2"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                $ref: "#/components/examples/MetaDataResponse"
  /organizations/{organization_id}/twingraph/{graph_id}/graph:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
      - name: graph_id
        in: path
        description: the Graph Identifier
        required: true
        schema:
          type: string
  /organizations/{organization_id}/twingraph/{graph_id}/batch:
    parameters:
      - name: organization_id
        in: path
        description: the Organization identifier
        required: true
        schema:
          type: string
      - name: graph_id
        in: path
        description: the Graph Identifier
        required: true
        schema:
          type: string
      - name: twinGraphQuery
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TwinGraphQuery'
        examples:
          Create Nodes:
            description: |
              Nodes creation and column mapping with CSV Header: $id, $name, $rank
              CSV Separator: ,
            value:
              query: "CREATE (:Person {id: toInteger($id), name: $name, rank: toInteger($rank)})"
          Update Nodes:
            description: |
              Nodes updating and column mapping with CSV Header: $id, $rank
              CSV Separator: ,
            value:
              query: "MATCH (p:Person {id: toInteger($id)}) SET p.rank = $rank"
          Create Relationships:
            description: |
              Relationship creation and column mapping with CSV Header: $id, $rank
              CSV Separator: ,
            value:
              query: |
                MERGE (p1:Person {id: toInteger($UserId1)})
                MERGE (p2:Person {id: toInteger($UserId2)})
                CREATE (p1)-[:FOLLOWS {reaction_count: $reaction_count}]->(p2)
          Delete Nodes:
            description: |
              Nodes deleting and column mapping with CSV Header: $id
              CSV Separator: ,
            value:
              query: "MATCH (p:Person {id: toInteger($id)}) DELETE p"
    post:
      operationId: batchUploadUpdate
      tags:
        - twingraph
      summary: "Async batch update by loading a CSV file on a graph instance "
      description: "Async batch update by loading a CSV file on a graph instance "
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              format: binary
            examples:
              Create / Update / Delete Nodes:
                value: |
                  id,name,rank
                  1,"John Doe",37
                  2,"Joe Bloggs",14
              Create / Update Relationships:
                value: |
                  UserId1,UserId2,reaction_count
                  1,2,25
                  2,1,37
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: csv file processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwinGraphBatchResult'
        "400":
          description: Bad request

components:
  securitySchemes:
    oAuth2AuthCode:
      type: oauth2
      description: OAuth2 authentication
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
          scopes:
            http://dev.api.cosmotech.com/platform: Platform scope
  schemas:
    TwinGraphQuery:
      type: object
      description: a twin graph query in cypher language
      properties:
        version:
          type: string
          description: Twin graph version
        query:
          type: string
          description: the query in cypher language
      required:
        - query
    TwinGraphBatchResult:
      type: object
      description: Processing result
      properties:
        totalLines:
          type: integer
        processedLines:
          type: integer
        errors:
          type: array
          items:
            type: string
      required:
        - totalLines
        - processedLines
        - errors
    TwinGraphHash:
      type: object
      description: a twin graph hash
      properties:
        hash:
          type: string
          description: the hash of the graph
    GraphProperties:
      type: object
      properties:
        type:
          type: string
          description: the type of the relationship
        source:
          type: string
          description: the source node of the relationship
        target:
          type: string
          description: the target node of the relationship
        name:
          type: string
          description: the name of the graph data object
        params:
          type: string
          description: the parameters of the graph data object
  examples:
    GetAllNodes:
      summary: Get all nodes query
      description: Get all nodes query (be careful if you want to query large graph)
      value:
        query: "MATCH(n) RETURN n"
    QueryEntities:
      summary: Run action on a graph relationship
      description: Run action on a graph relationship
      value:
        - type: "entityType"
          source: "source-node-name"
          target: "target-node-name"
          name: "entity-name"
          params: "param1: 'value1', param2: 'value2'"
        - type: "entityType"
          source: "source-node-name"
          target: "target-node-name"
          name: "entity-name"
          params: "param1: 'value1', param2: 'value2'"
    MetaDataResponse:
      summary: the response of a MetaData creation or modification
      value:
        lastVersion: "1"
        graphRotation: "3"
        lastModifiedDate: "2023/08/25 - 11:59:59"
        graphName: "graph"
