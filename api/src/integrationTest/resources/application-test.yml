management:
  endpoints:
    enabled-by-default: false

spring:
  data:
    redis:
      host: "localhost"
      username: "default"
      # Leave it as blank as there's no auth with test container
      password:
      client-type: jedis
  cloud:
    azure:
      # Required to auto-configure the beans provided by the Azure Spring Boot AutoConfigurations
      active-directory:
        profile:
          # tenantId is 'common' to use the login process of multi-tenant access
          # See https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/spring/azure-spring-boot-starter-active-directory/ACCESS_TO_MULTI_TENANT_APP.md
          tenant-id: "fake_tenant_id"
        credential:
          client-id: "fake_client_id"
          client-secret: "fake_client_secret"
        session-stateless: true
        app-id-uri: "fake_app_id_uri"
        enabled: true

csm:
  platform:
    azure:
      appIdUri: "api://fake_app_id_uri"
      credentials:
        core:
          tenantId: "fake_tenant_id"
          clientId: "fake_client_id"
          clientSecret: "fake_client_secret"
      dataWarehouseCluster:
        baseUri: "https://fake_uri.kusto.windows.net"
        options:
          ingestionUri: "https://ingest-fake_uri.kusto.windows.net"
      eventBus:
        baseUri: "amqps://fake_uri.servicebus.windows.net"
      containerRegistries:
        core: ghcr.io
        solutions: "localhost:5000"
      keyVault: "changeme"
      analytics:
        resourceUri: ""
        instrumentationKey: ""
        connectionString: "changeme"
    runOutsideKubernetes: true
    metrics:
      enabled: false
    api:
      # API Base Path for OpenAPI-generated controllers.
      # Might conflict with the SpringBoot context path, hence leaving it at the root
      base-path: /
      base-url: "http://fake_url:8080"
      version: latest
    id-generator:
      type: hashid
    event-publisher:
      type: in_process
    images:
      scenario-fetch-parameters: cosmo-tech/fetch-scenario-parameters
      send-datawarehouse: cosmo-tech/azure-data-explorer-connector
      scenario-data-upload: cosmo-tech/azure-storage-publish:latest
    containers:
      - name: "ADTTwingraphImport"
        imageRegistry: "ghcr.io"
        imageName: "cosmo-tech/adt-twincache-connector"
        imageVersion: "0.0.5"
      - name: "StorageTwingraphImport"
        imageRegistry: "ghcr.io"
        imageName: "cosmo-tech/azstorage-twincache-connector"
        imageVersion: "latest"
    upload:
      authorized-mime-types:
        workspaces:
          - application/zip
          - application/xml
          - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
          - application/x-tika-ooxml
          - text/csv
          - text/plain
          - text/x-yaml
          - application/json
    authorization:
      tenant-id-jwt-claim: "iss"
      # Note that the way @Value works in Spring does not make it possible to inject this sole YAML list.
      # Use CsmPlatformProperties instead !
      allowed-tenants: ["test"]
    vendor: azure
    argo:
      base-uri: "https://argo-server.argo.svc.cluster.local:2746"
      workflows:
        namespace: phoenix
        node-pool-label: ""
        service-account-name: workflowcsmv2
        storage-class: null
        access-modes:
          # Any in the following list: ReadWriteOnce, ReadOnlyMany, ReadWriteMany, ReadWriteOncePod (K8s 1.22+)
          - ReadWriteOnce
        requests:
          storage: 1Gi
    twincache:
      host: "localhost"
      port: "6379"
      username: "default"
      # Leave it as blank as there's no auth with test container
      password:
      connector:
        default-page-size: 5
    rbac:
      enabled: true


