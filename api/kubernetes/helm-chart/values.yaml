# Default values for cosmotech-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: cosmotech-api
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

#imagePullSecrets: []

# Set image pull secrets (in case you're using a private container registry).
imageCredentials:
  registry:
  username:
  password:

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  managementPort: 8081

api:
  # A Cosmo Tech Helm Release (e.g., latest, vX) is linked to an API Version;
  # so it must define its own path rules here.
  # This corresponds to the path under which this service is exposed, if behind a reverse proxy or
  # load balancer
  servletContextPath: /
  # Examples: latest, v1, v2
  version: latest

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: Prefix # For Kubernetes >= 1.19.0
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

config:
  csm:
    platform:
      vendor: azure
      azure:
        cosmos:
          key: "changeme"
          uri: "changeme"
      argo:
        base-url: "https://argo-server.argo.svc.cluster.local:2746"
      images:
        scenario-fetch-parameters: cosmotech/scenariofetchparameters:1.0.0
        send-datawarehouse: cosmotech/senddatawarehouse:1.0.0
      services:
        adx-dataingestion-uri: "https://ingest-phoenix.westeurope.kusto.windows.net"
        eventhub-cluster-uri: "amqps://csm-phoenix.servicebus.windows.net"
