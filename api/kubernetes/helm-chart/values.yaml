# Copyright (c) Cosmo Tech.
# Licensed under the MIT license.

#
# Default values for cosmotech-api.
#

# -- number of pods replicas
replicaCount: 1

image:
  # -- container image to use for deployment
  repository: ghcr.io/Cosmo-Tech/cosmotech-api
  # -- [policy](https://kubernetes.io/docs/concepts/containers/images/#updating-images) for pulling the image
  pullPolicy: IfNotPresent
  # -- container image tag. Defaults to the Chart `appVersion` if empty or missing
  tag: ""

#imagePullSecrets: []

# Set image pull secrets (in case you're using a private container registry).
imageCredentials:
  # -- container registry to use for pulling the Deployment image. Useful if you are using a private registry
  registry: ""
  # -- username for the container registry to use for pulling the Deployment image. Useful if you are using a private registry
  username: ""
  # -- password for registry to use for pulling the Deployment image. Useful if you are using a private registry
  password: ""

# -- value overriding the name of the Chart. Defaults to the Chart name.
# Truncated at 63 chars because some Kubernetes name fields are limited to this.
nameOverride: ""
# -- value overriding the full name of the Chart. If not set, the value is computed from `nameOverride`.
# Truncated at 63 chars because some Kubernetes name fields are limited to this.
fullnameOverride: ""

serviceAccount:
  # -- whether a service account should be created
  create: true
  # -- annotations to add to the service account
  annotations: {}
  # -- the name of the service account to use.
  # If not set and `serviceAccount.create` is `true`, a name is generated using the `fullname` template
  name: ""

# -- annotations to set the Deployment pod
podAnnotations: {}

# -- the pod security context, i.e. applicable to all containers part of the pod
podSecurityContext: {}
  # fsGroup: 2000

# -- the security context at the pod container level
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- service type. See [this page](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) for the possible values
  type: ClusterIP
  # -- service port
  port: 8080
  # -- service management port
  managementPort: 8081

api:
  # A Cosmo Tech Helm Release (e.g., latest, vX) is linked to an API Version;
  # so it must define its own path rules here.
  # This corresponds to the path under which this service is exposed, if behind a reverse proxy or
  # load balancer
  servletContextPath: /
  # Examples: latest, v1, v2
  version: latest

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
      - path: /
        pathType: Prefix # For Kubernetes >= 1.19.0
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- resources limits and requests for the pod placement
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

config:
  csm:
    platform:
      vendor: azure
      azure:
        cosmos:
          key: "changeme"
          uri: "changeme"
        storage:
          # -- Azure storage account name. Length should be between 3 and 24 and use numbers and lower-case letters only
          account-name: "changeme"
          # -- Azure storage account access key. Can be retrieved in the Azure portal
          account-key: "changeme"
      argo:
        enabled: true
        baseUrl: "https://argo-server.argo.svc.cluster.local:2746"
      images:
        scenario-fetch-parameters: cosmotech/scenariofetchparameters:1.0.0
        send-datawarehouse: cosmotech/senddatawarehouse:1.0.0
      services:
        adx-dataingestion-uri: "https://ingest-phoenix.westeurope.kusto.windows.net"
        eventhub-cluster-uri: "amqps://csm-phoenix.servicebus.windows.net"

# Dependencies
argo:
  # https://github.com/argoproj/argo-helm/blob/master/charts/argo/values.yaml
  images:
    pullPolicy: IfNotPresent
  workflow:
    serviceAccount:
      create: true
      name: workflow
    rbac:
      create: true
  minio:
    nameOverride: argo-minio
    install: true
  executor:
    env:
      RESOURCE_STATE_CHECK_INTERVAL: "1s"
  artifactRepository:
    archiveLogs: true
    s3:
      bucket: my-bucket
      # TODO : release name
      endpoint: cosmotech-latest-argo-minio:9000
      insecure: true
      accessKeySecret:
        # TODO : release name
        name: cosmotech-api-latest-argo-minio
        key: accesskey
      secretKeySecret:
        # TODO : release name
        name: cosmotech-api-latest-argo-minio
        key: secretkey
  server:
    name: argo-server
  controller:
    name: argo-workflow-controller
    containerRuntimeExecutor: k8sapi
    metricsConfig:
      enabled: true
    persistence:
      archive: true
      postgresql:
        # TODO https://github.com/helm/helm/issues/2133
        #   We cannot use the release name here => use envsubstr or gomtemplate ???
#        host: "{{ .Release.Name }}-postgresql"
        host: "cosmotech-api-latest-argo-postgresql"
        port: 5432
        database: argo_workflows
        tableName: workflows
        userNameSecret:
#          name: "{{ .Release.Name }}-argo-secret"
          name: "cosmotech-api-latest-argo-secret"
          key: postgresql.username
        passwordSecret:
#          name: "{{ .Release.Name }}-argo-secret"
          name: "cosmotech-api-latest-argo-secret"
          key: postgresql.password

postgresql:
  # https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
  nameOverride: argo-postgresql
  postgresqlDatabase: argo_workflows
  postgresqlUsername: argo
  postgresqlPassword: "changeme"
