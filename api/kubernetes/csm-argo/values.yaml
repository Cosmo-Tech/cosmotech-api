# Default values for csm-argo.

# Dependencies
argo:
  # https://github.com/argoproj/argo-helm/blob/master/charts/argo/values.yaml
  images:
    pullPolicy: IfNotPresent
  workflow:
    serviceAccount:
      create: true
      name: workflow
    rbac:
      create: true
  minio:
    install: true
    defaultBucket:
      enabled: true
      name: argo-workflows
    DeploymentUpdate:
      # As Minio uses a ReadWriteOnce PVC by default, using a RollingUpdate strategy will not
      # work if the new pod is scheduled on a different node.
      # It is possible to force the replicas scheduling on a same node, but this requires that node
      # to have a minimum of 4Gi additional memory available, which is the default memory request
      # set by Argo.
      type: Recreate
    networkPolicy:
      # Enabling networking policy returns the following error: unable to recognize "": no matches for kind "NetworkPolicy" in version "networking.k8s.io/v1beta1"
      # => will use the 'networking/traffic-allowed: "yes"' label instead to allow traffic.
      enabled: false
      allowExternal: true
    podLabels:
      networking/traffic-allowed: "yes"
  executor:
    env:
    - name: RESOURCE_STATE_CHECK_INTERVAL
      value: 1s
  artifactRepository:
    archiveLogs: true
    s3:
      bucket: argo-workflows
      endpoint: ${ARGO_RELEASE_NAME}-minio.${ARGO_RELEASE_NAMESPACE}.svc.cluster.local:9000
      insecure: true
      accessKeySecret:
        name: ${ARGO_RELEASE_NAME}-minio
        key: accesskey
      secretKeySecret:
        name: ${ARGO_RELEASE_NAME}-minio
        key: secretkey
  server:
    secure: false
    podLabels:
      networking/traffic-allowed: "yes"
  controller:
    podLabels:
      networking/traffic-allowed: "yes"
    containerRuntimeExecutor: k8sapi
    metricsConfig:
      enabled: true
    workflowDefaults:
      spec:
        # make sure workflows do not run forever. Default limit set is 7 days (604800 seconds)
        activeDeadlineSeconds: 604800
        ttlStrategy:
          # keep workflows that succeeded for 1d (86400 seconds).
          # We can still view them since they are archived.
          secondsAfterSuccess: 86400
          # keep workflows that have completed (either successfully or not) for 3d (259200 seconds).
          # We can still view them since they are archived.
          secondsAfterCompletion: 259200
        podGC:
          # Delete pods when workflows are successful.
          # We can still access their logs and artifacts since they are archived.
          # One of "OnPodCompletion", "OnPodSuccess", "OnWorkflowCompletion", "OnWorkflowSuccess"
          strategy: OnWorkflowSuccess
        volumeClaimGC:
          # Delete PVCs when workflows are done. However, due to Kubernetes PVC Protection,
          # such PVCs will just be marked as Terminating, until no pod is using them.
          # Pod deletion (either via the Pod GC strategy or the TTL strategy) will allow to free up
          # attached PVCs.
          # One of "OnWorkflowCompletion", "OnWorkflowSuccess"
          strategy: OnWorkflowCompletion
    persistence:
      archive: true
      postgresql:
        host: "${ARGO_RELEASE_NAME}-postgresql"
        database: argo_workflows
        tableName: workflows
        userNameSecret:
          name: "${ARGO_RELEASE_NAME}-argo-postgresql-secret"
          key: postgresql.username
        passwordSecret:
          name: "${ARGO_RELEASE_NAME}-argo-postgresql-secret"
          key: postgresql.password

postgresql:
  # https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
  postgresqlDatabase: argo_workflows
  postgresqlUsername: argo
  postgresqlPassword: "${ARGO_POSTGRESQL_PASSWORD}"
  networkPolicy:
    enabled: true
    explicitNamespacesSelector:
      matchExpressions:
        - key: app
          operator: In
          values:
          - argo-server
          - argo-workflow-controller
  # primary:
  #   labels:
  #     networking/traffic-allowed: "yes"
  #   podLabels:
  #     networking/traffic-allowed: "yes"
  # readReplicas:
  #   labels:
  #     networking/traffic-allowed: "yes"
  #   podLabels:
  #     networking/traffic-allowed: "yes"
